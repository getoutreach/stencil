<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functions Quick Reference on Stencil</title><link>https://engineering.outreach.io/stencil/functions/</link><description>Recent content in Functions Quick Reference on Stencil</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 01 Feb 2017 00:00:00 -0800</lastBuildDate><atom:link href="https://engineering.outreach.io/stencil/functions/index.xml" rel="self" type="application/rss+xml"/><item><title>file.Block</title><link>https://engineering.outreach.io/stencil/functions/file.block/</link><pubDate>Wed, 18 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/functions/file.block/</guid><description>###Block(name) Hello, world! ###EndBlock(name) ###Block(name) {{- /* Only output if the block is set */}} {{- if not (empty (file.Block &amp;#34;name&amp;#34;)) }} {{ file.Block &amp;#34;name&amp;#34; }} {{- end }} ###EndBlock(name) ###Block(name) {{ - /* Short hand syntax, but adds newline if no contents */}} {{ file.Block &amp;#34;name&amp;#34; }} ###EndBlock(name)</description></item><item><title>file.Create</title><link>https://engineering.outreach.io/stencil/functions/file.create/</link><pubDate>Wed, 18 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/functions/file.create/</guid><description>If the template has a single file with no contents this file replaces it.
{{- define &amp;#34;command&amp;#34; }} package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;hello, world!&amp;#34;) } {{- end }} # Generate a &amp;#34;&amp;lt;commandName&amp;gt;.go&amp;#34; file for each command in .arguments.commands {{- range $_, $commandName := (stencil.Arg &amp;#34;commands&amp;#34;) }} {{- file.Create (printf &amp;#34;cmd/%s.go&amp;#34; $commandName) 0600 now }} {{- stencil.ApplyTemplate &amp;#34;command&amp;#34; | file.SetContents }} {{- end }}</description></item><item><title>file.Delete</title><link>https://engineering.outreach.io/stencil/functions/file.delete/</link><pubDate>Wed, 18 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/functions/file.delete/</guid><description>{{ file.Delete }}</description></item><item><title>file.Path</title><link>https://engineering.outreach.io/stencil/functions/file.path/</link><pubDate>Wed, 18 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/functions/file.path/</guid><description>{{ file.Path }}</description></item><item><title>file.RemoveAll</title><link>https://engineering.outreach.io/stencil/functions/file.removeall/</link><pubDate>Wed, 18 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/functions/file.removeall/</guid><description>{{ file.RemoveAll &amp;#34;path&amp;#34; }}</description></item><item><title>file.SetContents</title><link>https://engineering.outreach.io/stencil/functions/file.setcontents/</link><pubDate>Wed, 18 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/functions/file.setcontents/</guid><description>This is useful for programmatic file generation within a template.
{{ file.SetContents &amp;#34;Hello, world!&amp;#34; }}</description></item><item><title>file.SetPath</title><link>https://engineering.outreach.io/stencil/functions/file.setpath/</link><pubDate>Wed, 18 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/functions/file.setpath/</guid><description>{{ $_ := file.SetPath &amp;#34;new/path/to/file.txt&amp;#34; }} Note: The $_ is required to ensure &amp;lt;nil&amp;gt; isn&amp;rsquo;t outputted into the template.</description></item><item><title>file.Skip</title><link>https://engineering.outreach.io/stencil/functions/file.skip/</link><pubDate>Wed, 18 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/functions/file.skip/</guid><description>{{ $_ := file.Skip &amp;#34;A reason to skip this reason&amp;#34; }}</description></item><item><title>file.Static</title><link>https://engineering.outreach.io/stencil/functions/file.static/</link><pubDate>Wed, 18 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/functions/file.static/</guid><description>Marking a file is equivalent to calling file.Skip, but instead file.Skip is only called if the file already exists. This is useful for files you want to generate but only once. It&amp;rsquo;s generally recommended that you do not do this as it limits your ability to change the file in the future.
{{ $_ := file.Static }}</description></item><item><title>stencil.AddToModuleHook</title><link>https://engineering.outreach.io/stencil/functions/stencil.addtomodulehook/</link><pubDate>Wed, 18 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/functions/stencil.addtomodulehook/</guid><description>This functions write to module hook owned by another module for it to operate on. These are not strongly typed so it&amp;rsquo;s best practice to look at how the owning module uses it for now. Module hooks must always be written to with a list to ensure that they can always be written to multiple times.
{{- /* This writes to a module hook */}} {{ stencil.AddToModuleHook &amp;#34;github.com/myorg/repo&amp;#34; &amp;#34;myModuleHook&amp;#34; (list &amp;#34;myData&amp;#34;) }}</description></item><item><title>stencil.ApplyTemplate</title><link>https://engineering.outreach.io/stencil/functions/stencil.applytemplate/</link><pubDate>Wed, 18 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/functions/stencil.applytemplate/</guid><description>This function does not support rendering a template from another module.
{{- define &amp;#34;command&amp;#34;}} package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;hello, world!&amp;#34;) } {{- end }} {{- stencil.ApplyTemplate &amp;#34;command&amp;#34; | file.SetContents }}</description></item><item><title>stencil.Arg</title><link>https://engineering.outreach.io/stencil/functions/stencil.arg/</link><pubDate>Wed, 18 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/functions/stencil.arg/</guid><description>{{- stencil.Arg &amp;#34;name&amp;#34; }} Note: Using `stencil.Arg` with no path returns all arguments and is equivalent to `stencil.Args`. However, that is DEPRECATED along with `stencil.Args` as it doesn&amp;rsquo;t provide default types, or check the JSON schema, or track which module calls what argument.</description></item><item><title>stencil.Args</title><link>https://engineering.outreach.io/stencil/functions/stencil.args/</link><pubDate>Wed, 18 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/functions/stencil.args/</guid><description>Deprecated: Use Arg instead. Args returns all arguments passed to stencil from the service&amp;rsquo;s manifest
Note: This doesn&amp;rsquo;t set default values and is instead representative of _all_ data passed in its raw form.
This is deprecated and will be removed in a future release.
{{- (stencil.Args).name }}</description></item><item><title>stencil.Exists</title><link>https://engineering.outreach.io/stencil/functions/stencil.exists/</link><pubDate>Wed, 18 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/functions/stencil.exists/</guid><description>{{- if stencil.Exists &amp;#34;myfile.txt&amp;#34; }} {{ stencil.ReadFile &amp;#34;myfile.txt&amp;#34; }} {{- end }}</description></item><item><title>stencil.GetGlobal</title><link>https://engineering.outreach.io/stencil/functions/stencil.getglobal/</link><pubDate>Wed, 18 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/functions/stencil.getglobal/</guid><description>GetGlobal retrieves a global variable set by SetGlobal. The data returned from this function is unstructured so by averse to panics - look at where it was set to ensure you&amp;rsquo;re dealing with the proper type of data that you think it is.
{{- /* This retrieves a global from the current context of the template module repository */}} {{ $isGeorgeCool := stencil.GetGlobal &amp;#34;IsGeorgeCool&amp;#34; }}</description></item><item><title>stencil.GetModuleHook</title><link>https://engineering.outreach.io/stencil/functions/stencil.getmodulehook/</link><pubDate>Wed, 18 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/functions/stencil.getmodulehook/</guid><description>This is incredibly useful for allowing other modules to write to files that your module owns. Think of them as extension points for your module. The value returned by this function is always a []interface{}, aka a list.
{{- /* This returns a []interface{} */}} {{ $hook := stencil.GetModuleHook &amp;#34;myModuleHook&amp;#34; }} {{- range $hook }} {{ . }} {{- end }}</description></item><item><title>stencil.ReadBlocks</title><link>https://engineering.outreach.io/stencil/functions/stencil.readblocks/</link><pubDate>Wed, 18 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/functions/stencil.readblocks/</guid><description>ReadBlocks parses a file and attempts to read the blocks from it, and their data.
As a special case, if the file does not exist, an empty map is returned instead of an error.
**NOTE**: This function does not guarantee that blocks are able to be read during runtime. for example, if you try to read the blocks of a file from another module there is no guarantee that that file will exist before you run this function.</description></item><item><title>stencil.ReadFile</title><link>https://engineering.outreach.io/stencil/functions/stencil.readfile/</link><pubDate>Wed, 18 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/functions/stencil.readfile/</guid><description>{{ stencil.ReadFile &amp;#34;myfile.txt&amp;#34; }}</description></item><item><title>stencil.SetGlobal</title><link>https://engineering.outreach.io/stencil/functions/stencil.setglobal/</link><pubDate>Wed, 18 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/functions/stencil.setglobal/</guid><description>SetGlobal sets a global to be used in the context of the current template module repository. This is useful because sometimes you want to define variables inside of a helpers template file after doing manifest argument processing and then use them within one or more template files to be rendered; however, go templates limit the scope of symbols to the current template they are defined in, so this is not possible without external tooling like this function.</description></item></channel></rss>