<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reference Docs Overview on Stencil</title><link>https://engineering.outreach.io/stencil/reference/</link><description>Recent content in Reference Docs Overview on Stencil</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 02 May 2022 00:00:00 -0700</lastBuildDate><atom:link href="https://engineering.outreach.io/stencil/reference/index.xml" rel="self" type="application/rss+xml"/><item><title>service.yaml</title><link>https://engineering.outreach.io/stencil/reference/service.yaml/</link><pubDate>Wed, 04 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/reference/service.yaml/</guid><description>What is a service.yaml? A service.yaml can be thought as the specification for an application based on the modules being used. It defines the modules an application uses and the arguments to pass to them.
What are the fields in a service.yaml name: The name of the application arguments: The arguments to pass to the modules. This is a map of key value pairs. modules: The modules to use.</description></item><item><title>Stencil Modules</title><link>https://engineering.outreach.io/stencil/reference/modules/</link><pubDate>Wed, 04 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/reference/modules/</guid><description>Stencil Modules are the core building blocks in Stencil.
Modules are used to create reusable grouping of templates and native extensions to be used by stencil.
Stencil Modules are powered by Go Modules and must be within a git repository. For more information about Go Modules, see:
https://github.com/golang/go/wiki/Modules https://blog.golang.org/using-go-modules Types of Modules There are two types of module usable by stencil, a module and a native extension. A module may, itself, be only one of these types of modules.</description></item><item><title>Native Extensions</title><link>https://engineering.outreach.io/stencil/reference/native-extensions/</link><pubDate>Mon, 02 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/reference/native-extensions/</guid><description>A native extension follows the base rules of a template module, but it may not contain any templates. This means a template module CANNOT contain a native extension.
The major difference between a module and a native extension is that instead of a templates/ directory a plugin/ directory is used to store the source code of the plugin.
Creating a Native Extension For details on how to create a native extension, check out the getting started documentation.</description></item><item><title>Template Module</title><link>https://engineering.outreach.io/stencil/reference/template-module/</link><pubDate>Mon, 02 May 2022 00:00:00 -0700</pubDate><guid>https://engineering.outreach.io/stencil/reference/template-module/</guid><description>A template module, sometimes referred to as a &amp;ldquo;template repository&amp;rdquo; is a module consumable by a stencil application, that contains a collection of go-templates.
General Module Requirements A module requires a name and a description currently that are set in the manifest.yaml described later on in this document.
The name of a module must be equal to the import path of the module. The import path of a module follows the same rules as Golang, where as the repository URL must equal the import path.</description></item></channel></rss>